ANTLR 4 C# Target 实现 C++ 函数定义分析器

1. 词法分析
(1) 	空白符				空白字符, 换行符, 制表符, 返回符
(2) 	调用约定			_stdcall, _cdecl, _fastcall
(3)		数据类型			int, short, long, float, double, char, bool, wchar_t
(4)		标识符				第一位必须是字母或下划线, 接下来任意(含 0)个位, 若有则一定是: 下划线, 数字, 字母
(5)		数字					整数部分必须存在, 小数部分可有可无
(6)		字符					单引号内任意字符
(7)		字符串				双引号内任意字符串
ANDTOKEN
	:	'&&'
	;

ORTOKEN
	:	'||'
	;

EQUALTOKEN
	:	'=='
	;

LESSEQUAL
	:	'<='
	;

MOREEQUAL
	:	'>='
	;

NEGEQUAL
	:	'!='
	;

ADDASSIGN
	:	'+='
	;

SUBASSIGN
	:	'-='
	;

MULASSIGN
	:	'*='
	;

DIVASSIGN
	:	'/='
	;

NEGTOKEN
	:	'!'
	;

PLUSTOKEN
	:	'+'
	;

SUBTOKEN
	:	'-'
	;

DIVTOKEN
	:	'/'
	;

ASSIGNTOKEN
	:	'='
	;

LESSTOKEN
	:	'<'
	;

MORETOKEN
	:	'>'
	;

STAR
	:	'*'
	;

SEMICOLON
	:	';'
	;

COMMA
	:	','
	;

ANDSINGLE
	:	'&'
	;

ORSINGLE
	:	'|'
	;

LEFTBRACKET
	:	'{'
	;

RIGHTBRACKET
	:	'}'
	;

LEFTPAREN
	:	'('
	;

RIGHTPAREN
	:	')'
	;
	
WHILETOKEN
	:	'while'
	;

FORTOKEN
	:	'for'
	;

RETURNTOKEN
	:	'return'
	;

VOIDTOKEN
	:	'void'
	;

BREAKTOKEN
	:	'break'
	;

CONTINUETOKEN
	:	'continue'
	;



2. 语法分析
(1)		表达式				标识符, 数字, 字符, 字符串				是表达式
								表达式 == != <= >= < = 表达式		是表达式
								表达式 + - * / 表达式						是表达式
								表达式 & | && ||								是表达式
								( 表达式 )										是表达式
								! 表达式											是表达式
								
(2)		声明					数据类型 标识符 ;
(3)		声明赋值			数据类型 标识符 = 表达式 ;
(4)		赋值					标识符 = += -= *= /= 表达式;
(5)		函数定义(1)		数据类型 (任意层指针)	 (调用约定) 标识符 ( 任意数量(含 0)参数声明, 可声明任意层指针类型 ) {
									必须一个或多个 return 表达式 ;
									任意数量和位置的 声明, 声明赋值, 赋值, 表达式, while 循环, for 循环;
								}
(6)		函数定义(2)		void 	(调用约定) 标识符 ( 任意数量(含 0)参数声明, 可声明任意层指针类型 ) {
									任意数量和位置的 声明, 声明赋值, 赋值, 表达式 while 循环, for 循环;
									可有 0 个或多个 return ;
								}

(7)		while 循环			while ( 表达式 )  {
									任意数量和位置的 声明, 声明赋值, 赋值, 表达式, while 循环, for 循环, break, continue;
								}
(8)		for 循环				for (0 或多个表达式, 声明, 声明赋值, 或赋值 ; 0 或多个表达式 ; 0 或多个表达式, 声明, 声明赋值, 或赋值 )
								{
									任意数量和位置的 声明, 声明赋值, 赋值, 表达式, while 循环, for 循环, break, continue;
								}

3. Main 函数流程说明
StreamReader inputStream = new StreamReader(Console.OpenStandardInput());		// 声明控制台输入流
AntlrInputStream input = new AntlrInputStream(inputStream.ReadToEnd());				// 将控制台输入流数据 转入 ANTLR 输入流
CppFuncDefLexer lexer = new CppFuncDefLexer(input);											// 将 ANTLR 输入流数据 转入 词法分析器
CommonTokenStream tokens = new CommonTokenStream(lexer);							// 词法分析器输出 存入 符号流
CppFuncDefParser parser = new CppFuncDefParser(tokens);									// 符号流 转入 语法分析器
IParseTree tree = parser.cppFunction();																	// 语法分析 cppFunction 产生语法树
Console.WriteLine(tree.ToStringTree(parser));															// 输出不合法信息和语法树
Console.Read();																										// 保持控制台窗口开启

4. 左递归的避免
	词法分析左递归问题困扰我们许久, 后来发现, 将特殊化程度高的词法规则放到词法规则表的上方, 可避免左递归问题. 例如:
	
	CALLINGCONV
	:	'_' ('stdcall' | 'cdecl' | 'fastcall')
	;

	DATATYPE
	:	'int' | 'short' | 'long' | 'float' | 'double' | 'char' | 'bool' | 'wchar_t'
	;

	ID
	:	([a-zA-Z] | '_') ([a-zA-Z] | '_' | [0-9])*
	;

	CALLINGCONV 和 DATATYPE 均完全符合 ID 的语法规则.

5. 语义分析实现未果
	根据 ANTLR C# Target 教程, 在语法分析中, 一行表达式的后面加上 # Tag 可以使项目相应地自动生成 Visitor 派生类中的 override Visit 函数, 该函数的参数 context 包含了该行表达式上各个符号或表达式的内容. 但是, 我无法加上  # Tag 后使语法文件通过编译, 也没能发现 Visitor 派生类之中的用于 override 的函数. 虽有心完成一点语义分析, 但最终智能放弃.
